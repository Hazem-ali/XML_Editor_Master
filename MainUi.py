# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# must execute pip install qdarkstyle to enable new themes
import qdarkstyle as theme

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QFile, QTextStream


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 560)
        MainWindow.setMinimumSize(QtCore.QSize(800, 580))
        MainWindow.setMaximumSize(QtCore.QSize(800, 580))
        MainWindow.setAcceptDrops(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.XML_TextBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.XML_TextBox.setGeometry(QtCore.QRect(20, 160, 371, 351))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.XML_TextBox.setFont(font)
        self.XML_TextBox.setReadOnly(True)
        self.XML_TextBox.setOverwriteMode(False)
        self.XML_TextBox.setObjectName("XML_TextBox")
        self.Open_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.OpenFile())
        self.Open_Button.setGeometry(QtCore.QRect(20, 120, 80, 30))
        self.Open_Button.setObjectName("Open_Button")
        self.Json_TextBox = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Json_TextBox.setGeometry(QtCore.QRect(410, 160, 371, 351))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Json_TextBox.setFont(font)
        self.Json_TextBox.setReadOnly(True)
        self.Json_TextBox.setOverwriteMode(False)
        self.Json_TextBox.setObjectName("Json_TextBox")
        self.Check_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Check_Button.setGeometry(QtCore.QRect(110, 120, 91, 30))
        self.Check_Button.setObjectName("Check_Button")
        self.Solve_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Solve_Button.setGeometry(QtCore.QRect(210, 120, 91, 30))
        self.Solve_Button.setObjectName("Solve_Button")
        self.Minify_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Minify_Button.setGeometry(QtCore.QRect(310, 120, 80, 30))
        self.Minify_Button.setObjectName("Minify_Button")
        self.Convert_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Convert_Button.setGeometry(QtCore.QRect(410, 120, 111, 30))
        self.Convert_Button.setObjectName("Convert_Button")
        self.Compress_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Compress_Button.setGeometry(QtCore.QRect(530, 120, 101, 30))
        self.Compress_Button.setObjectName("Compress_Button")
        self.SaveAs_Button = QtWidgets.QPushButton(
            self.centralwidget, clicked=lambda: self.SaveFile())
        self.SaveAs_Button.setGeometry(QtCore.QRect(640, 120, 80, 30))
        self.SaveAs_Button.setObjectName("SaveAs_Button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.Title = QtWidgets.QLabel(self.centralwidget)
        self.Title.setGeometry(QtCore.QRect(230, 20, 341, 61))
        font = QtGui.QFont()
        font.setFamily("Lucida Handwriting")
        font.setPointSize(35)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Title.setFont(font)
        self.Title.setAutoFillBackground(False)
        self.Title.setAlignment(QtCore.Qt.AlignCenter)
        self.Title.setObjectName("Title")
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpen = QtWidgets.QMenu(self.menubar)
        self.menuOpen.setObjectName("menuOpen")
        self.menuTheme = QtWidgets.QMenu(self.menubar)
        self.menuTheme.setObjectName("menuTheme")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        self.statusBar.showMessage("Welcome to XML Editor")
        
        MainWindow.setStatusBar(self.statusBar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(lambda: self.OpenFile())
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave_As.triggered.connect(lambda: self.SaveFile())
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionLight = QtWidgets.QAction(MainWindow)
        self.actionLight.setCheckable(False)
        self.actionLight.setChecked(False)
        self.actionLight.setObjectName("actionLight")
        self.actionLight.triggered.connect(lambda: Change_Theme("light"))
        
        self.actionDark = QtWidgets.QAction(MainWindow)
        self.actionDark.setCheckable(False)
        self.actionDark.setChecked(False)
        self.actionDark.setObjectName("actionDark")
        self.actionDark.triggered.connect(lambda: Change_Theme("dark"))
        self.menuOpen.addAction(self.actionOpen)
        self.menuOpen.addSeparator()
        self.menuOpen.addAction(self.actionSave_As)
        self.menuOpen.addSeparator()
        self.menuOpen.addAction(self.actionClose)
        self.menuTheme.addAction(self.actionLight)
        self.menuTheme.addAction(self.actionDark)
        self.menubar.addAction(self.menuOpen.menuAction())
        self.menubar.addAction(self.menuTheme.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def OpenFile(self):
        # Load Data
        options = QtWidgets.QFileDialog.Options()
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow, "Open XML file", "", "XML Files (*.xml)", options=options)
        if fileName:
            print(fileName)
            self.Read_and_Fill(fileName, self.XML_TextBox)
            self.statusBar.showMessage("File Opened")
            

    def Read_and_Fill(self, fileName, textbox):
        # This function reads a file and stores it in TextBox
        with open(fileName, 'r') as f:
            data = f.read()
            textbox.setPlainText(data)

    def SaveFile(self):
        # Save Data
        name, extension = QtWidgets.QFileDialog.getSaveFileName(
            MainWindow, 'Save File', filter="JSON (*.json);;XML (*.xml)")
        print(name)
        # If a name is written
        if name:
            with open(name, 'w') as f:
                if extension.startswith("XML"):
                    f.write(self.current_xml)
                elif extension.startswith("JSON"):
                    f.write(self.current_json)
            self.statusBar.showMessage("Saved Successfully")
            

    def Fill_From_String(self, data, textbox):
        # This function stores a string into TextBox
        textbox.setPlainText(data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "XML Editor"))
        self.XML_TextBox.setPlaceholderText(
            _translate("MainWindow", "XML Data..."))
        self.Open_Button.setText(_translate("MainWindow", "Open"))
        self.Json_TextBox.setPlaceholderText(
            _translate("MainWindow", "JSON Data..."))
        self.Check_Button.setText(_translate("MainWindow", "Check Errors"))
        self.Solve_Button.setText(_translate("MainWindow", "Solve Errors"))
        self.Minify_Button.setText(_translate("MainWindow", "Minify XML"))
        self.Convert_Button.setText(
            _translate("MainWindow", "Convert to JSON"))
        self.Compress_Button.setText(_translate("MainWindow", "Compress Data"))
        self.SaveAs_Button.setText(_translate("MainWindow", "Save As"))
        self.Title.setText(_translate("MainWindow", "XML Editor"))
        self.menuOpen.setTitle(_translate("MainWindow", "File"))
        self.menuTheme.setTitle(_translate("MainWindow", "Theme"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionLight.setText(_translate("MainWindow", "Light"))
        self.actionDark.setText(_translate("MainWindow", "Dark"))

def Change_Theme(color):
    
    # Change GUI Theme
    # get the QApplication instance,  or crash if not set
    app = QtWidgets.QApplication.instance()
    if app is None:
        raise RuntimeError("No Qt Application found.")

    if color == "dark":
        app.setStyleSheet(theme.load_stylesheet(palette=theme.DarkPalette))
    elif color == "light":
        app.setStyleSheet(theme.load_stylesheet(palette=theme.LightPalette))
    
    

    
    
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    try:
        app.setStyleSheet(theme.load_stylesheet(palette=theme.LightPalette))
    except:
        pass
    MainWindow.show()
    sys.exit(app.exec_())
